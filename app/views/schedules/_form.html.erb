<script type="text/javascript">

function convertDateTime(date, time){
  try {
    var date = date.split("/");
    var yyyy = date[2];
    var mm = date[0]-1;
    var dd = date[1];

    var time = time.split(":");
    var h = parseInt(time[0]);
    var m = parseInt(time[1].substring(0,2));
    var meridian = time[1].substring(time[1].length - 2, time[1].length);
    
    if (meridian.toUpperCase() == "PM" && h > 12) {
      h += 12;
    } else if (meridian.toUpperCase() == "AM" && h == 12) {
      h -= 12;
    }
    
    var s = 0;

    return new Date(yyyy,mm,dd,h,m,s);
  } catch(e) { 
    return null;
  }
}

function onScheduleTimeChange(from_time_date, from_time_time, to_time_date, to_time_time, hours_for_range) {
  var fromDateTime = convertDateTime(from_time_date.val(), from_time_time.val());
  var toDateTime = convertDateTime(to_time_date.val(), to_time_time.val());
  if (fromDateTime != null && toDateTime != null) {
    console.log("fromDateTime: " + fromDateTime);
    console.log("toDateTime: " + toDateTime);
    var totalHours = ((toDateTime - fromDateTime) / 1000 / 60 / 60);
    console.log("totalHours: " + totalHours);
    if (totalHours != NaN)
      hours_for_range.text(totalHours + " hours");
    else
      hours_for_range.text("");
  } else {
    hours_for_range.text("");
  }
}

function makePickers() {
  $.each($("#schedule_form input.date-picker.from"), function(index, value){
    var from_time_date = $(value);
    var to_time_date = $($("#schedule_form input.date-picker.to")[index]);
    var from_time_time = $($("#schedule_form input.time-picker.from")[index]);
    var to_time_time = $($("#schedule_form input.time-picker.to")[index]);
    var hours_for_range = $($("label.hours_for_range")[index]);
    
    from_time_date.datepicker();
    to_time_date.datepicker();
    from_time_time.timepicker();
    to_time_time.timepicker();
    
    var onChange = function() { 
      onScheduleTimeChange(from_time_date, from_time_time, to_time_date, to_time_time, hours_for_range);
    };
    
    from_time_date.on("change", onChange);
    to_time_date.on("change", onChange);
    from_time_time.on("changeTime", onChange);
    to_time_time.on("changeTime", onChange);
  });
}


$(function() {
  makePickers();
});
/*$(function() {
  $("input[name='schedule[from_time_date]']").datepicker();
  $("input[name='schedule[to_time_date]']").datepicker();
  $("input[name='schedule[from_time]']").timepicker();
  $("input[name='schedule[to_time]']").timepicker({
    'minTime': $("input[name='schedule[from_time]']").val(),
  });
  $("input[name='schedule[from_time]']").on("changeTime", function(){
    $("input[name='schedule[to_time]']").timepicker('remove');
    $("input[name='schedule[to_time]']").timepicker({
      'minTime': $(this).val(),
      'showDuration': true
    });
  });  
});*/



function addToMassAssignList(option) {
  var row_id = "user_id_" + option.value
  if ( $("#" + row_id).length == 0 ) {
    var row_div = $("<div id='" + row_id + "' style='row'>");
    var label_div = $("<div style='float: left'>");
    label_div.text(option.label);
  
    var user_id_field = $("<input id='user_ids_" + option.value + "' name='user_ids[" + option.value + "]' type='hidden'>");
    user_id_field.val(option.label);
    label_div.append(user_id_field);
  
    var remove_link_div = $("<div style='float: right'>");
    var remove_link = $("<a href='#'>");
    remove_link.text("remove");
    remove_link.click(function() {
      removeRowFromMassAssign(row_id);
      checkForScheduleConflicts();
      return false;
    });
    remove_link_div.append(remove_link);
  
    row_div.append(label_div);
    row_div.append(remove_link_div);
    $("#mass_assign_users").append(row_div);
    $("#mass_assign_users").append( "<div style='clear: both'>" );
  }
}

function removeRowFromMassAssign(row_id) {
  $("#" + row_id).remove();
}

function checkForScheduleConflicts() {
  var postData = $("#schedule_form").serializeArray();
  var formURL = "<%= schedules_schedule_conflicts_path %>";
  $.ajax({
    url : formURL,
    type: "get",
    data : postData,
    success:function(data, textStatus, jqXHR) {
      $("#schedule_conflicts").empty();
      $("#schedule_conflicts").append(data);
    },
    error: function(jqXHR, textStatus, errorThrown) {
      
    }
  });
}

$(function() {
  $( "#schedule_job_id" ).combobox({
    list: $( "#schedule_job_id" ),
    parent_div: $("#job_id_input_group"),
    input: $("#job_id_input")
  });
  <% if !@schedule.persisted? %>
  $( "#user_id" ).combobox({
    list: $( "#user_id" ),
    parent_div: $("#user_id_input_group"),
    input: $("#user_id_input"),
    custom_on_select: function(option) {
      addToMassAssignList(option);
      checkForScheduleConflicts();
    }
  });
  <% end %>
  <% params[:user_ids].try(:each) do |k, v| %>
  addToMassAssignList({ value: '<%= k %>', label: '<%= v %>' });
  <% end %>
  
  $( "#schedule_schedule_date" ).change(function(e) {
    checkForScheduleConflicts();
    var fromDate = new Date($( "#schedule_schedule_date" ).val());
    var toDate = new Date($( "#schedule_through_schedule_date" ).val());

    if (!isNaN(fromDate) && !isNaN(toDate)) {
      if (toDate < fromDate) {
        $( "#schedule_through_schedule_date" ).val($( "#schedule_schedule_date" ).val());
      }
    }
    
    if (!isNaN(fromDate)) {
      var today = new Date();
      today.setHours(0);
      today.setMinutes(0);
      today.setSeconds(0);

      var dayOffset = Math.round((fromDate - today)/(1000*60*60*24));
      
      $("#schedule_through_schedule_date").datepicker("destroy");
      $("#schedule_through_schedule_date").datepicker({ minDate: dayOffset});
    }
  });
  $( "#schedule_through_schedule_date" ).change(function(e) {
    checkForScheduleConflicts();
  });
  $( "#schedule_from_time" ).change(function(e) {
    checkForScheduleConflicts();
  });
  $( "#schedule_to_time" ).change(function(e) {
    checkForScheduleConflicts();
  });
  
  $( "#schedule_schedule_date" ).change();
  
  $('#schedule_form').submit(function() {
    $(this).find("input:submit").prop('disabled',true);
  });
});
</script>
<%= form_for(@schedule, html: { id: "schedule_form" }) do |f| %>
  <input name="schedule_id" type="hidden" value="<%= @schedule.id %>">
  <div id="schedule_conflicts">
    
  </div>
  <% if @schedule.errors.any? %>
    <div id="error_explanation" class="alert alert-error">
      <strong><%= pluralize(@schedule.errors.count, "error") %> prohibited this schedule from being saved:</strong>

      <ul>
      <% @schedule.errors.full_messages.each do |msg| %>
        <li><%= msg %></li>
      <% end %>
      </ul>
    </div>
  <% end %>

  <div class="row">
    <div class="col-md-8">
      <label for="job_id_input">Job:</label>
      <%= f.select :job_id, @jobs, selected: @schedule.job.try(:id) || params[:job_id], include_blank: true %>
      <input id="job_id_input" title="Job" placeholder="Job" class="form-control custom-combobox-input ui-autocomplete-input" autocomplete="on" data-original-title="">
      <div id="job_id_input_group" class="input-group">
        <span class="input-group-btn">
          <button class="btn btn-default" type="button">Job</button>
        </span>
      </div>
      <br />
      <% if @schedule.persisted? %>
        User: <%= @schedule.user.full_name %>
        <br />
      <% else %>
      <label for="user_id_input">Employee:</label>
      <%= select_tag :user_id, options_for_select(@users, params[:employee_id]), include_blank: true %>
      <input id="user_id_input" title="Employee" placeholder="Employee" class="form-control custom-combobox-input ui-autocomplete-input" autocomplete="on" data-original-title="">
      <div id="user_id_input_group" class="input-group">
        <span class="input-group-btn">
          <button class="btn btn-default" type="button">Employee</button>
        </span>
      </div>
      <% end %>
      <br />
      <div class="row">
        <div class="col-md-6">
          <label>From Date/Time: </label>
        </div>
        <div class="col-md-6">
          <label>Through Date/Time: </label>
        </div>
      </div>
      <% @schedule_time_ranges.each_with_index do |schedule_time_range, index| %>
      <!-- 
        default_schedule_date(:from_time) 
        default_from_time(:from_time)
        default_schedule_date(:to_time)
        default_from_time(:to_time)
      -->
      <div class="row">
        <div class="col-md-3">
          <%= text_field_tag "schedule_item[0][from_time_date]", schedule_time_range["from_time_date"], class: "form-control date-picker from", placeholder: "mm/dd/yyyy" %>
        </div>

        <div class="col-md-2">
          <%= text_field_tag "schedule_item[0][from_time_time]", schedule_time_range["from_time_time"], class: "form-control time-picker from", placeholder: "h:mm" %>
        </div>

        <div class="col-md-3">
          <%= text_field_tag "schedule_item[0][to_time_date]", schedule_time_range["to_time_date"], class: "form-control date-picker to", placeholder: "mm/dd/yyyy" %>
        </div>

        <div class="col-md-2">
          <%= text_field_tag "schedule_item[0][to_time_time]", schedule_time_range["to_time_time"], class: "form-control time-picker to", placeholder: "h:mm" %>
        </div>

        <div class="col-md-2">
          <label class="hours_for_range"><%= schedule_time_range["total_hours"] %></label>
        </div>
      </div>
      <% end %>

      <% unless @schedule.persisted? %>
      <br />
      <div class="row">
        <div class="col-md-12">
          Repeat through (customize times by day)
        </div>
      </div>
      <% end %>
          
          
          
          
          
          
          
          
          <!--
          <br />
          <% unless @schedule.persisted? %>
            <label for="shedule_through_schedule_date">Through Date:</label>
            <%= f.text_field :through_schedule_date, value: default_schedule_date(:through_schedule_date), class: "form-control", placeholder: "Through Date" %>
          <br />
          <% end %>
          <label for="schedule_from_time">From Time:</label>
          
          <br />
          <label for="schedule_to_time">To Time:</label>
          <%= f.text_field :to_time, value: format_time_to_hour(@schedule.to_time), class: "form-control", placeholder: "To Time" %>
        
          <br />
        </div>-->

      <%= hidden_field_tag :return_path, params[:return_path] %>
      <%= hidden_field_tag :future_schedule_id, params[:future_schedule_id] %>
    </div>
    <div id="mass_assign_users" class="col-md-4" style="padding-top: 15px; padding-bottom: 15px">
      
    </div>
  </div>
  <br>

  <div class="row">
    <div class="col-md-4">
      <%= f.submit class: "btn btn-lg btn-primary btn-block" %>
    </div>
  </div>
  <% unless @schedule.persisted? || (defined?(@future_schedule) && !@future_schedule.nil?) %>

  <br>
  <div class="row">
    <div class="col-md-4">
      <%= f.submit class: "btn btn-lg btn-primary btn-block", value: "Create Pending Schedule" %>
    </div>
  </div>
  <% end %>
  <% if @future_schedule %>

  <br>
  <div class="row">
    <div class="col-md-4">
      <%= f.submit class: "btn btn-lg btn-primary btn-block", value: "Update Pending Schedule" %>
    </div>
  </div>

  <br>
  <div class="row">
    <div class="col-md-4">
      <%= f.submit class: "btn btn-lg btn-primary btn-block", value: "Delete Pending Schedule" %>
    </div>
  </div>
  <% end %>
<% end %>

<br />
